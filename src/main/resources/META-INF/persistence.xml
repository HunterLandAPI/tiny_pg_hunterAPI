<?xml version="1.0" encoding="UTF-8"?>
<persistence xmlns="https://jakarta.ee/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="https://jakarta.ee/xml/ns/persistence
             https://jakarta.ee/xml/ns/persistence/persistence_3_0.xsd"
             version="3.0">

    <!-- 
    persistence-unit: JPA에서 데이터베이스 연결과 관련된 모든 설정을 하나로 묶은 단위입니다.
    name="minecraft-plugin-db"는 DatabaseManager.java에서 참조하는 이름과 일치해야 합니다.
    -->
    <persistence-unit name="minecraft-plugin-db" transaction-type="RESOURCE_LOCAL">
        
        <!-- 
        JPA 구현체 명시: Hibernate를 사용한다고 명시적으로 선언합니다.
        이렇게 하면 JPA의 여러 구현체 중 Hibernate를 사용하게 됩니다.
        -->
        <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
        
        <!-- 
        엔티티 클래스들을 명시적으로 등록합니다.
        자동 스캔도 가능하지만, 플러그인 환경에서는 명시적 등록이 더 안전합니다.
        -->
        <class>io.github.louis5103.tiny_pg_hunterAPI.model.entity.PlayerData</class>

        <properties>
            <!-- 
            === 데이터베이스 연결 설정 ===
            실제 배포 시에는 이 값들을 외부 설정 파일에서 읽어오는 것이 보안상 좋습니다.
            -->
            
            <!-- MySQL 데이터베이스 연결 URL -->
            <!-- 형식: jdbc:mysql://호스트:포트/데이터베이스명?옵션들 -->
            <property name="jakarta.persistence.jdbc.url" 
                      value="jdbc:mysql://localhost:3306/minecraft_db?useSSL=false&amp;serverTimezone=Asia/Seoul&amp;allowPublicKeyRetrieval=true"/>
            
            <!-- 데이터베이스 사용자명 -->
            <property name="jakarta.persistence.jdbc.user" value="minecraft_user"/>
            
            <!-- 데이터베이스 비밀번호 -->
            <property name="jakarta.persistence.jdbc.password" value="MyStrongPassword123!"/>
            
            <!-- JDBC 드라이버 클래스 -->
            <property name="jakarta.persistence.jdbc.driver" value="com.mysql.cj.jdbc.Driver"/>

            <!-- 
            === HikariCP 커넥션 풀 설정 ===
            마인크래프트 플러그인에서는 동시에 많은 플레이어가 접속할 수 있으므로
            커넥션 풀을 사용해서 데이터베이스 연결을 효율적으로 관리합니다.
            -->
            
            <!-- HikariCP를 커넥션 풀 제공자로 사용 -->
            <property name="hibernate.connection.provider_class" 
                      value="org.hibernate.hikaricp.internal.HikariCPConnectionProvider"/>
            
            <!-- 최소 유지 커넥션 수: 항상 2개의 연결을 유지 -->
            <property name="hibernate.hikari.minimumIdle" value="2"/>
            
            <!-- 최대 커넥션 수: 최대 10개까지 연결 허용 -->
            <property name="hibernate.hikari.maximumPoolSize" value="10"/>
            
            <!-- 유휴 커넥션 타임아웃: 5분간 사용되지 않으면 연결 해제 -->
            <property name="hibernate.hikari.idleTimeout" value="300000"/>
            
            <!-- 커넥션 최대 생존 시간: 30분 -->
            <property name="hibernate.hikari.maxLifetime" value="1800000"/>
            
            <!-- 커넥션 획득 타임아웃: 30초 내에 연결을 얻지 못하면 예외 발생 -->
            <property name="hibernate.hikari.connectionTimeout" value="30000"/>

            <!-- 
            === Hibernate 동작 설정 ===
            -->
            
            <!-- 
            DDL 자동 생성 정책:
            - create: 시작할 때마다 테이블을 새로 생성 (기존 데이터 삭제)
            - create-drop: 시작 시 생성, 종료 시 삭제
            - update: 스키마를 업데이트 (운영 환경에서 주로 사용)
            - validate: 스키마가 올바른지만 검증
            - none: 아무것도 하지 않음
            -->
            <property name="hibernate.hbm2ddl.auto" value="update"/>
            
            <!-- SQL 쿼리를 콘솔에 출력 (개발 중에만 true로 설정) -->
            <property name="hibernate.show_sql" value="true"/>
            
            <!-- SQL 쿼리를 보기 좋게 포맷팅 -->
            <property name="hibernate.format_sql" value="true"/>
            
            <!-- SQL 코멘트 표시 -->
            <property name="hibernate.use_sql_comments" value="true"/>
            
            <!-- 
            데이터베이스 방언 설정: 
            MySQL 8.0용 방언을 사용합니다. 이를 통해 Hibernate가 
            MySQL의 특정 기능들을 올바르게 사용할 수 있습니다.
            -->
            <property name="hibernate.dialect" value="org.hibernate.dialect.MySQL8Dialect"/>
            
            <!-- 
            네이밍 전략: 
            자바의 camelCase를 데이터베이스의 snake_case로 자동 변환
            예: playerName -> player_name
            -->
            <property name="hibernate.physical_naming_strategy" 
                      value="org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy"/>

        </properties>
    </persistence-unit>
</persistence>
